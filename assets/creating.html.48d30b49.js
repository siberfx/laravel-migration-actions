import{_ as n,z as a,A as s,a6 as e}from"./framework.2b954cae.js";const t={},o=e(`<h1 id="creating-actions" tabindex="-1"><a class="header-anchor" href="#creating-actions" aria-hidden="true">#</a> Creating Actions</h1><p>To create an action use the <code>make:action</code> artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:action some_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The new action&#39;s file will be placed in your <code>actions</code> directory in the base path of your app.</p><p>Each action file name contains a timestamp, which allows Laravel to determine the order of the actions.</p><h2 id="automatically-generate-a-file-name" tabindex="-1"><a class="header-anchor" href="#automatically-generate-a-file-name" aria-hidden="true">#</a> Automatically Generate A File Name</h2><p>If you do not specify the &quot;name&quot; attribute, then the file name will be generated automatically according to the rule:</p><blockquote><p>git branch name ?: &#39;auto&#39;</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:action

<span class="token comment">### When the git repository is found (\`base_path(&#39;.git&#39;)\` directory is exists) and HEAD branch name is &#39;qwerty&#39;</span>
<span class="token comment"># 2022_10_11_225116_qwerty.php</span>
<span class="token comment"># 2022_10_11_225118_qwerty.php</span>
<span class="token comment"># 2022_10_11_225227_qwerty.php</span>

<span class="token comment">### When the git repository is not found (\`base_path(&#39;.git&#39;)\` directory doesn&#39;t exists).</span>
<span class="token comment"># 2022_10_11_225116_auto.php</span>
<span class="token comment"># 2022_10_11_225118_auto.php</span>
<span class="token comment"># 2022_10_11_225227_auto.php</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nested-files" tabindex="-1"><a class="header-anchor" href="#nested-files" aria-hidden="true">#</a> Nested Files</h2><p>You can use nested paths to create actions:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:action Foo/Bar/QweRty
php artisan make:action Foo/Bar/QweRty.php

php artisan make:action Foo<span class="token punctuation">\\</span>Bar<span class="token punctuation">\\</span>QweRty
php artisan make:action Foo<span class="token punctuation">\\</span>Bar<span class="token punctuation">\\</span>QweRty.php

php artisan make:action foo<span class="token punctuation">\\</span>bar<span class="token punctuation">\\</span>QweRty
php artisan make:action foo<span class="token punctuation">\\</span>bar<span class="token punctuation">\\</span>QweRty.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All of these commands will create a file called <code>actions/foo/bar/Y_m_d_His_qwe_rty.php</code>.</p><p>For example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:action foo<span class="token punctuation">\\</span>bar<span class="token punctuation">\\</span>QweRty
<span class="token comment"># actions/foo/bar/2022_10_11_225734_qwe_rty.php</span>

php artisan make:action foo<span class="token punctuation">\\</span>bar<span class="token punctuation">\\</span>QweRty.php
<span class="token comment"># actions/foo/bar/2022_10_11_225734_qwe_rty.php</span>

php artisan make:action foo/bar/QweRty
<span class="token comment"># actions/foo/bar/2022_10_11_225734_qwe_rty.php</span>

php artisan make:action foo/bar/QweRty.php
<span class="token comment"># actions/foo/bar/2022_10_11_225734_qwe_rty.php</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="invokable-method" tabindex="-1"><a class="header-anchor" href="#invokable-method" aria-hidden="true">#</a> Invokable Method</h2><p>By default, the new action class will contain the <code>__invoke</code> method, but you can easily replace it with public <code>up</code> name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">DragonCode<span class="token punctuation">\\</span>LaravelActions<span class="token punctuation">\\</span>Action</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// some code</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note that the <code>__invoke</code> method has been added as a single call. This means that when the action is running, it will be called, but not when it is rolled back.</p><p>You should also pay attention to the fact that if there is an <code>__invoke</code> method in the class, the <code>down</code> method will not be called.</p></blockquote><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">DragonCode<span class="token punctuation">\\</span>LaravelActions<span class="token punctuation">\\</span>Action</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// called when \`php artisan actions\` running</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// doesn&#39;t call when \`php artisan migrate:rollback\` running</span>
                                    <span class="token comment">// and any other commands to revert the action.  </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a> Dependency Injection</h2><p>You can also use the dependency injection with <code>__invoke</code>, <code>up</code> and <code>down</code> methods:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">DragonCode<span class="token punctuation">\\</span>LaravelActions<span class="token punctuation">\\</span>Action</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>Some</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Some</span> <span class="token variable">$some</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$some</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;qwerty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">DragonCode<span class="token punctuation">\\</span>LaravelActions<span class="token punctuation">\\</span>Action</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>Some</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Some</span> <span class="token variable">$some</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$some</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;qwerty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Some</span> <span class="token variable">$some</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$some</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;qwerty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),p=[o];function i(c,l){return a(),s("div",null,p)}const u=n(t,[["render",i],["__file","creating.html.vue"]]);export{u as default};
